#!/usr/bin/env node


var fs = require('fs');
var path = require('path');
var readline = require('readline');

var FullContact = require('fullcontact');
var async = require('async');
var mkdirp = require('mkdirp');
var program = require('commander');
var stormpath = require('stormpath');


// Globals
var FULLCONTACT_CLIENT;
var STORMPATH_CLIENT;
var VERSION = '0.0.1';

var HOME = process.env[(process.platform == 'win32') ? 'USERPROFILE': 'HOME'];
var CONFIG_DIR = HOME + '/.stormpath/enrich';
var CONFIG_FILE = CONFIG_DIR + '/config.json';


// Initialize command line.
program
  .version(VERSION)
  .option('-c, --configure', 'Configure enrich.', 'configure')
  .parse(process.argv);


/*
 * Configure enrich by asking for / utilizing a user's Stormpath and FullContact
 * credentials.
 *
 * This will store all configuration information in a JSON file inside
 * ~/.stormpath/enrich/config.json
 */
function configure() {

  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  // Ensure the config directory exists.
  mkdirp(CONFIG_DIR, function(err, made) {
    if (err) {
      console.log("ERROR: Can't create configuration directory:", CONFIG_DIR);
      process.exit(1);
    }
  });

  // Grab the user's API keys for Stormpath and FullContact, then store them in
  // the configuration file.
  async.waterfall([
    function(cb) {
      rl.question("Enter your Stormpath API Key ID: ", function(id) {
        cb(null, id.trim());
      });
    },
    function(id, cb) {
      rl.question("Enter your Stormpath API Key Secret: ", function(secret) {
        cb(null, id, secret.trim());
      });
    },
    function(id, secret, cb) {
      rl.question("Enter your FullContact API Key: ", function(key) {
        cb(null, id, secret, key.trim());
      });
    },
    function(id, secret, key, cb) {
      fs.writeFile(CONFIG_FILE, JSON.stringify({
          stormpath_api_key_id: id,
          stormpath_api_key_secret: secret,
          fullcontact_api_key: key,
      }, null, 2), function(err) {
        if (err) {
          console.log("ERROR: Can't write configuration file:", CONFIG_FILE);
          cb(err);
        }
        cb();
      });
    },
  ], function(err) {
    rl.close();
  });

}


/**
 * Load configuration information from the config file.  If no configuration
 * information can be found, the callback will be called with an error argument.
 *
 * @param {Function} callback The callback function to run after configuration
 *   information has been loaded.  The signature of the callback function is
 *   (err, config), where err is an error, and config is JSON configuration
 *   data.
 **/
function load(callback) {

  var config;

  fs.readFile(CONFIG_FILE, 'utf8', function(err, data) {
    if (err) {
      callback(new Error("ERROR: Couldn't open the configuration file. You need to configure stormpath-enrich to continue!"));
    }

    try {
      config = JSON.parse(data);
    } catch (e) {
      callback(new Error("ERROR: Couldn't parse the configuration data. You need to configure stormpath-enrich to continue!"));
    }

    callback(null, config);
  });

}


/**
 * Grab a person's data using FullContact's API, given an email address.  If no
 * information can be found, the callback will be called with an error.
 *
 * @param {Function} callback The callback function to run after a user's data
 *   has been retrieved.  The signature of the callback function is (err, data)
 *   where data is a JSON object.
 **/
function grabData(email, callback) {

  FULLCONTACT_CLIENT.person.email(email, function(err, data) {
    callback(err, data);
  });

}


/**
 * Build an array of all Stormpath Directories, then return it.
 *
 * @param {Function} callback The callback function to run after all directories
 *  have been retrieved.  The signature of the callback function is (err,
 *  directories) where directories is an array of Directory objects.
 **/
function getDirectories(callback) {

  var all_directories = [];

  STORMPATH_CLIENT.getDirectories(function(err, directories) {
    directories.each(function(directory, cb) {
      all_directories.push(directory);
      cb();
    }, function(err) {
      if (err) {
        callback(new Error("Failed to retrieve list of directories from Stormpath."));
      }
      callback(null, all_directories);
    });
  });

}


/**
 * Enrich an individual Stormpath account using FullContact data.
 *
 * @param {Object} account The Stormpath Account to update.
 **/
function processAccount(account) {

  console.log('Fetching updates for account:', account.email);

  async.waterfall([

    // Grab the user's data from FullContact.
    function(callback) {
      grabData(account.email, callback);
    },

    // Update the user's account.
    function(fcData, callback) {

      // First, we'll manually set the user's givenName and surname if
      // available.
      if (fcData.contactInfo) {
        if (fcData.contactInfo.givenName) {
          account.givenName = fcData.contactInfo.givenName;
        }
        if (fcData.contactInfo.familyName) {
          account.surname = fcData.contactInfo.familyName;
        }
      }

      // Save the basic account data.
      account.save(function(err) {

        // Now, we'll update the user's customData with whatever else
        // FullContact has on this user.
        account.customData.get(function(err, data) {
          if (err) callback();

          if (fcData.photos) {
            data.photos = fcData.photos;
          }
          if (fcData.contactInfo) {
            data.contactInfo = fcData.contactInfo;
          }
          if (fcData.organizations) {
            data.organizations = fcData.organizations;
          }
          if (fcData.demographics) {
            data.demographics = fcData.demographics;
          }
          if (fcData.socialProfiles) {
            data.socialProfiles = fcData.socialProfiles;
          }
          data.save(callback);
        });

      });

    },

  ]);

}


/**
 * Iterate through all accounts in a given directory, and process each account.
 *
 * @param {Json} directory The Stormpath directory object to process.
 * @param {Function} callback The callback to run once this directory has been
 *   fully processed.  This callback has the signature (err), where err is an
 *   error.  If err is null, the processing finished successfully.
 **/
function processDirectory(directory, callback) {

  // Get a list of all accounts in this directory.
  directory.getAccounts(function(err, accounts) {
    if (err) {
      callback(new Error("Failed to retrieve Accounts list for Directory:", directory.name));
    }

    // Iterate through each account.
    accounts.each(function(account, cb) {
      processAccount(account);
      cb();
    }, function(err) {
      if (err) {
        callback(new Error("Failed to update Accounts for Directory:", directory.name));
      }
      callback();
    });
  });

}


/**
 * Update all Stormpath Accounts with FullContact data, given an array of
 * Stormpath Directories.
 *
 * @param {Function} callback The callback function to run after all accounts
 *  have been updated.  The signature of the callback function is (err), where
 *  err is an error.  If err is null, it means all updates completed
 *  successfully.
 **/
function updateAccounts(directories, callback) {

  // Process each directory in series (as a form of rate limiting).
  async.eachSeries(directories, processDirectory, function(err) {
    callback();
  });

}


/**
 * Initialize all global API clients, given configuration data.
 *
 * @param {Json} config Configuration data.
 * @param {Function} callback Callback to run once this function is done
 *   executing.  This callback has the signature (err), where err is an error.
 *   If err is null, everything succeeded.
 **/
function initializeClients(config, callback) {

  var apiKey = new stormpath.ApiKey(
    config.stormpath_api_key_id,
    config.stormpath_api_key_secret
  );

  STORMPATH_CLIENT = new stormpath.Client({apiKey: apiKey});
  FULLCONTACT_CLIENT = new FullContact(config.fullcontact_api_key);

  callback();

}


if (program.configure) {
  configure();
} else {

  async.waterfall([

    // First, Load configuration details.
    load,

    // Next, initialize our API clients.
    initializeClients,

    // Second, iterate through all Stormpath Directories.
    getDirectories,

    // Third, iterate through all Stormpath Accounts.
    updateAccounts,

  ], function(err) {
    if (err) throw err;
  });

}
